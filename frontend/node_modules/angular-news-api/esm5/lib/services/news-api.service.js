/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import NewsAPI from 'newsapi';
import { NewsApiConfigService } from './news-api-config.service';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./news-api-config.service";
var NewsApiService = /** @class */ (function () {
    function NewsApiService(newsApiConfigService) {
        this.newsApiConfigService = newsApiConfigService;
        this.newsApi = new NewsAPI(this.newsApiConfigService.key);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NewsApiService.prototype.topHeadlines = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return from(this.newsApi.v2.topHeadlines(config));
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NewsApiService.prototype.everything = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return from(this.newsApi.v2.everything(config));
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NewsApiService.prototype.sources = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return from(this.newsApi.v2.sources(config));
    };
    NewsApiService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NewsApiService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NewsApiConfigService,] }] }
    ]; };
    /** @nocollapse */ NewsApiService.ngInjectableDef = i0.defineInjectable({ factory: function NewsApiService_Factory() { return new NewsApiService(i0.inject(i1.NewsApiConfigService)); }, token: NewsApiService, providedIn: "root" });
    return NewsApiService;
}());
export { NewsApiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NewsApiService.prototype.newsApi;
    /**
     * @type {?}
     * @private
     */
    NewsApiService.prototype.newsApiConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV3cy1hcGkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbmV3cy1hcGkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbmV3cy1hcGkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBUWpFLE9BQU8sRUFBRSxJQUFJLEVBQWMsTUFBTSxNQUFNLENBQUM7OztBQUV4QztJQU1FLHdCQUFrRCxvQkFBb0I7UUFBcEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFBO1FBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVELENBQUM7Ozs7O0lBRUQscUNBQVk7Ozs7SUFBWixVQUFhLE1BQTBCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7O0lBRUQsbUNBQVU7Ozs7SUFBVixVQUFXLE1BQXdCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7O0lBRUQsZ0NBQU87Ozs7SUFBUCxVQUFRLE1BQXFCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7O2dCQXBCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dEQUljLE1BQU0sU0FBQyxvQkFBb0I7Ozt5QkFsQjFDO0NBaUNDLEFBckJELElBcUJDO1NBbEJZLGNBQWM7Ozs7OztJQUN6QixpQ0FBZ0I7Ozs7O0lBRUosOENBQTBEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgTmV3c0FQSSBmcm9tICduZXdzYXBpJztcbmltcG9ydCB7IE5ld3NBcGlDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9uZXdzLWFwaS1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge1xuICBUb3BIZWFkbGluZXNDb25maWcsXG4gIFRvcEhlYWRsaW5lc1Jlc3BvbnNlLFxuICBFdmVyeXRoaW5nUmVzcG9uc2UsXG4gIEV2ZXJ5dGhpbmdDb25maWcsXG4gIFNvdXJjZXNDb25maWdcbn0gZnJvbSAnLi4vaW50ZXJmYWNlcy9uZXdzYXBpLm1vZGVscyc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5ld3NBcGlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBuZXdzQXBpO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTmV3c0FwaUNvbmZpZ1NlcnZpY2UpIHByaXZhdGUgbmV3c0FwaUNvbmZpZ1NlcnZpY2UpIHtcbiAgICB0aGlzLm5ld3NBcGkgPSBuZXcgTmV3c0FQSSh0aGlzLm5ld3NBcGlDb25maWdTZXJ2aWNlLmtleSk7XG4gIH1cblxuICB0b3BIZWFkbGluZXMoY29uZmlnOiBUb3BIZWFkbGluZXNDb25maWcpOiBPYnNlcnZhYmxlPFRvcEhlYWRsaW5lc1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuIGZyb20odGhpcy5uZXdzQXBpLnYyLnRvcEhlYWRsaW5lcyhjb25maWcpKTtcbiAgfVxuXG4gIGV2ZXJ5dGhpbmcoY29uZmlnOiBFdmVyeXRoaW5nQ29uZmlnKTogT2JzZXJ2YWJsZTxFdmVyeXRoaW5nUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gZnJvbSh0aGlzLm5ld3NBcGkudjIuZXZlcnl0aGluZyhjb25maWcpKTtcbiAgfVxuXG4gIHNvdXJjZXMoY29uZmlnOiBTb3VyY2VzQ29uZmlnKTogT2JzZXJ2YWJsZTxTb3VyY2VzQ29uZmlnPiB7XG4gICAgcmV0dXJuIGZyb20odGhpcy5uZXdzQXBpLnYyLnNvdXJjZXMoY29uZmlnKSk7XG4gIH1cbn1cblxuXG4iXX0=